<?xml version="1.0" encoding="UTF-8"?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services ../vendor/symfony/dependency-injection/Symfony/Component/DependencyInjection/Loader/schema/dic/services/services-1.0.xsd">
    <imports>
        <import resource="environment.xml" />
        <import resource="environment.local.xml" ignore-errors="true" />
    </imports>
    <services>
        <!-- Application Services -->
        <service id="authentication.service" class="PHPSC\Conference\Application\Service\AuthenticationService">
            <argument type="service" id="session" />
            <argument type="service" id="user.management.service" />
        </service>
        <service id="user.json.service" class="PHPSC\Conference\Application\Service\UserJsonService">
            <argument type="service" id="authentication.service" />
            <argument type="service" id="user.management.service" />
        </service>
        <service id="talk.json.service" class="PHPSC\Conference\Application\Service\TalkJsonService">
            <argument type="service" id="authentication.service" />
            <argument type="service" id="talk.management.service" />
            <argument type="service" id="event.management.service" />
        </service>
        <service id="attendee.json.service" class="PHPSC\Conference\Application\Service\AttendeeJsonService">
            <argument type="service" id="authentication.service" />
            <argument type="service" id="event.management.service" />
            <argument type="service" id="attendee.management.service" />
            <argument type="service" id="payment.management.service" />
            <argument type="service" id="talk.management.service" />
        </service>
        <service id="opinion.json.service" class="PHPSC\Conference\Application\Service\OpinionJsonService">
            <argument type="service" id="authentication.service" />
            <argument type="service" id="talk.management.service" />
            <argument type="service" id="opinion.management.service" />
        </service>
        <service id="company.json.service" class="PHPSC\Conference\Application\Service\CompanyJsonService">
            <argument type="service" id="company.management.service" />
        </service>
        <service id="supporter.json.service" class="PHPSC\Conference\Application\Service\SupporterJsonService">
            <argument type="service" id="supporter.management.service" />
            <argument type="service" id="company.management.service" />
        </service>
        <service id="image.rendering.service" class="PHPSC\Conference\Application\Service\ImageRenderingService">
            <argument type="service" id="image.factory" />
            <argument type="service" id="image.resizing.service" />
            <argument>%app.baseDir%</argument>
        </service>

        <!-- Domain Services -->
        <service id="user.management.service" class="PHPSC\Conference\Domain\Service\UserManagementService">
            <argument type="service" id="user.repository" />
            <argument type="service" id="profile.repository" />
            <argument type="service" id="email.delivery.service" />
        </service>
        <service id="event.management.service" class="PHPSC\Conference\Domain\Service\EventManagementService">
            <argument type="service" id="event.repository" />
        </service>
        <service id="talk.management.service" class="PHPSC\Conference\Domain\Service\TalkManagementService">
            <argument type="service" id="talk.repository" />
            <argument type="service" id="talkType.repository" />
        </service>
        <service id="attendee.management.service" class="PHPSC\Conference\Domain\Service\AttendeeManagementService">
            <argument type="service" id="attendee.repository" />
            <argument type="service" id="talk.management.service" />
            <argument type="service" id="email.delivery.service" />
        </service>
        <service id="payment.management.service" class="PHPSC\Conference\Domain\Service\PaymentManagementService">
            <argument type="service" id="payment.repository" />
            <argument type="service" id="pagseguro.notificationService" />
            <argument type="service" id="pagseguro.paymentService" />
            <argument type="service" id="payment.event.manager" />
        </service>
        <service id="opinion.management.service" class="PHPSC\Conference\Domain\Service\OpinionManagementService">
            <argument type="service" id="opinion.repository" />
        </service>
        <service id="supporter.management.service" class="PHPSC\Conference\Domain\Service\SupporterManagementService">
            <argument type="service" id="supporter.repository" />
            <argument type="service" id="supporter.factory" />
        </service>
        <service id="company.management.service" class="PHPSC\Conference\Domain\Service\CompanyManagementService">
            <argument type="service" id="company.repository" />
            <argument type="service" id="company.factory" />
        </service>
        
        <!-- Entity Repositories -->
        <service id="user.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\User</argument>
        </service>
        <service id="location.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\Location</argument>
        </service>
        <service id="event.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\Event</argument>
        </service>
        <service id="talk.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\Talk</argument>
        </service>
        <service id="talkType.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\TalkType</argument>
        </service>
        <service id="attendee.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\Attendee</argument>
        </service>
        <service id="opinion.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\Opinion</argument>
        </service>
        <service id="profile.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\SocialProfile</argument>
        </service>
        <service id="payment.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\Payment</argument>
        </service>
        <service id="company.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\Company</argument>
        </service>
        <service id="supporter.repository" factory-service="entityManager" factory-method="getRepository">
            <argument>PHPSC\Conference\Domain\Entity\Supporter</argument>
        </service>
        
        <!-- Factories -->
        <service id="supporter.factory" class="PHPSC\Conference\Domain\Factory\SupporterFactory" />
        <service id="company.factory" class="PHPSC\Conference\Domain\Factory\CompanyFactory">
            <argument type="service" id="image.factory" />
            <argument type="service" id="image.validation.service" />
        </service>
        
        <!-- Infra Services -->
        <service id="email.delivery.service" class="PHPSC\Conference\Infra\Email\DeliveryService">
            <argument type="service" id="swiftmailer.mailer" />
            <argument>contato@phpsc.com.br</argument>
            <argument>PHPSC Conference</argument>
        </service>
        <service id="image.factory" class="PHPSC\Conference\Infra\Images\ImageFactory" />
        <service id="image.validation.service" class="PHPSC\Conference\Infra\Images\ImageValidator" />
        <service id="image.resizing.service" class="PHPSC\Conference\Infra\Images\ImageResizer" />
        
        <!-- Payment Events -->
        <service id="payment.event.manager" class="Doctrine\Common\EventManager">
            <call method="addEventSubscriber">
                <argument type="service" id="attendee.payment.subscriber" />
            </call>
        </service>
        <service id="attendee.payment.subscriber" class="PHPSC\Conference\Domain\Service\AttendeePaymentSubscriber">
            <argument type="service" id="attendee.management.service" />
        </service>

        <!-- Swift Mailer -->
        <service id="swiftmailer.transport.smtp" class="Swift_SmtpTransport" factory-class="Swift_SmtpTransport" factory-method="newInstance">
            <argument>%smtp.host%</argument>
            <argument>%smtp.port%></argument>
            <argument>%smtp.encryption%</argument>
            <call method="setUsername">
                <argument>%smtp.username%</argument>
            </call>
            <call method="setPassword">
                <argument>%smtp.password%</argument>
            </call>
            <call method="setAuthMode">
                <argument>%smtp.auth_mode%</argument>
            </call>
        </service>
        <service id="swiftmailer.mailer" class="Swift_Mailer" factory-class="Swift_Mailer" factory-method="newInstance">
            <argument type="service" id="swiftmailer.transport.smtp" />
        </service>
        
        <!-- OAuth2 Manager -->
        <service id="oauth2.manager" class="Lcobucci\Social\AuthClient">
            <call method="appendProvider">
                <argument>github</argument>
                <argument type="service" id="oauth2.github" />
            </call>
            <call method="appendProvider">
                <argument>facebook</argument>
                <argument type="service" id="oauth2.facebook" />
            </call>
            <call method="appendProvider">
                <argument>linkedin</argument>
                <argument type="service" id="oauth2.linkedin" />
            </call>
            <call method="appendProvider">
                <argument>google</argument>
                <argument type="service" id="oauth2.google" />
            </call>
            <call method="appendProvider">
                <argument>live</argument>
                <argument type="service" id="oauth2.live" />
            </call>
        </service>
        
        <!-- OAuth2 Providers -->
        <service id="oauth2.github" factory-class="Lcobucci\Social\Providers\Github" factory-method="create">
            <argument>%github.id%</argument>
            <argument>%github.secret%</argument>
            <argument>%app.baseuri%oauth/github/callback</argument>
            <argument type="collection">
                <argument>user:email</argument>
            </argument>
        </service>
        <service id="oauth2.facebook" factory-class="Lcobucci\Social\Providers\Facebook" factory-method="create">
            <argument>%facebook.id%</argument>
            <argument>%facebook.secret%</argument>
            <argument>%app.baseuri%oauth/facebook/callback</argument>
            <argument type="collection">
                <argument>email</argument>
            </argument>
        </service>
        <service id="oauth2.linkedin" factory-class="Lcobucci\Social\Providers\LinkedIn" factory-method="create">
            <argument>%linkedin.id%</argument>
            <argument>%linkedin.secret%</argument>
            <argument>%app.baseuri%oauth/linkedin/callback</argument>
        </service>
        <service id="oauth2.google" factory-class="Lcobucci\Social\Providers\Google" factory-method="create">
            <argument>%google.id%</argument>
            <argument>%google.secret%</argument>
            <argument>%app.baseuri%oauth/google/callback</argument>
        </service>
        <service id="oauth2.live" factory-class="Lcobucci\Social\Providers\Live" factory-method="create">
            <argument>%live.id%</argument>
            <argument>%live.secret%</argument>
            <argument>%app.baseuri%oauth/live/callback</argument>
        </service>
        
        <!-- PagSeguro -->
        <service id="pagseguro.credentials"
            class="PHPSC\PagSeguro\ValueObject\Credentials">
            <argument>%pagseguro.email%</argument>
            <argument>%pagseguro.token%</argument>
        </service>
        <service id="pagseguro.paymentService"
            class="PHPSC\PagSeguro\PaymentService">
            <argument type="service" id="pagseguro.credentials" />
        </service>
        <service id="pagseguro.notificationService"
            class="PHPSC\PagSeguro\NotificationService">
            <argument type="service" id="pagseguro.credentials" />
        </service>
    </services>
</container>